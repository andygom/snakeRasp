import numpy as np
from numpy import random
import time
# from adafruit_servokit import adafruit_servokit
# kit = ServoKit(channels=16)


# weightsIH = np.random.random((14, 14)) * 2 - 1

weightsIH = [ 2.11318092e-03, -8.35920462e-06,  1.12516464e-01,  6.52050647e-09,
       -9.82867064e-09,  2.79252087e-02, -1.46787810e-06, -1.39742855e-05,
       -2.32388964e-09, -6.04404364e-07,  5.23868727e-07,  6.09860261e-06,
       -2.50273374e-04,  5.86466527e-07] ,    [ 1.99290047e+01, -1.56460280e-04,  8.60537246e-02,  4.20809811e-03,
       -1.03019526e-02, -8.36507089e+00,  5.35837121e-01,  4.67843368e-07,
        1.73136120e-01,  1.48470270e-06, -1.67169737e-03, -2.39367164e-06,
        5.22981034e-01, -1.73200758e-05] ,    [ 1.78891881e+02,  4.71673075e-06, -1.80701089e-02,  1.45268089e-01,
        6.87167702e-03,  2.14300750e+01, -4.75357030e-06, -5.78888677e-01,
        4.13986637e-04, -8.51603737e-02,  1.18375623e+00, -1.27680016e+03,
        5.70500898e-06, -8.05842305e-02] ,    [-3.90351763e-10, -5.81466362e-01, -1.56753547e-07,  7.90600104e-09,
        4.64562810e-07, -1.53422011e-07, -1.81469288e+00, -1.53144254e-07,
        1.64687960e-01, -2.14825371e-06,  2.57830857e-08, -4.61374257e-09,
       -2.06518523e-05, -2.20898566e-01] ,    [ 6.59283692e-06, -1.85722163e-04, -2.31227904e+02,  8.52537865e-07,
       -1.12120660e-03,  4.99380131e+00, -1.64451700e-06, -6.90608187e-02,
        1.35575763e-02, -9.67550139e-07,  2.47329543e-05, -5.88703290e-13,
       -3.84719120e-02, -9.93094137e-05] ,    [ 7.58338572e-02,  8.89818291e-03, -2.56079100e-01,  9.29664177e-01,
        1.78434158e-09, -1.26859037e+04, -3.61450281e-09, -1.72616870e-06,
       -4.97418231e-10,  3.45685593e+01,  5.78282827e-08,  2.56378174e-09,
        1.31061145e+00, -3.74635877e-04], [-8.62909220e-09,  9.46359042e-06,  1.51179285e-02, -3.52506043e-05,
       -1.13205684e-03,  8.19938608e-10,  2.26396869e-02, -4.10925511e-06,
        1.23842850e-02,  1.57029269e-10, -5.16357579e+00,  7.57177858e-03,
       -1.48455950e-08,  9.30424253e+00] ,     [-2.41420234e-05,  3.90889460e-04, -6.77555117e-06, -3.77663899e-05,
        2.16752573e-03, -5.02893522e-07,  1.96734776e-04,  1.06039819e+04,
       -2.37334784e-03,  5.56789198e-05,  3.56495820e-06,  9.85005002e-06,
       -1.79221370e-01,  6.95206215e-02] ,     [-9.79439164e-09,  1.17533838e-03,  1.15580146e-03,  3.50642543e-04,
        2.84108548e-04,  7.82754284e-08, -1.70593278e-02,  2.60926422e-05,
        9.61914435e-10,  4.44242792e-01,  7.10148723e-08, -6.21052041e-04,
        8.42281782e-10, -8.36881919e-05] ,     [-1.46381740e-04,  1.42814652e+01, -1.70026604e-03, -3.79400587e-05,
        6.60024081e-02,  1.67671826e-02, -5.85933410e-05, -9.04103187e-02,
        4.16911512e-06, -1.31076854e-05, -5.86671214e-03, -4.55016324e-06,
        9.52210073e-03,  3.20229174e+01] ,     [ 3.25194567e-02, -2.92193158e-02, -3.22125808e-03, -1.08092770e-01,
       -1.32842591e-02, -1.10740259e-04,  4.04324255e-04, -1.70353428e-07,
        3.80076545e-03,  2.69402605e-02, -9.46329754e-03, -2.96898997e-08,
        1.15867911e-05, -3.30043377e+01] ,     [ 2.52676757e-13,  1.53261259e-06, -8.97977340e-04,  2.59283128e-03,
       -1.66508814e-03, -3.15353228e-04,  8.96083444e-04, -1.83676357e-05,
        4.32991998e-07,  1.17121404e+00, -3.88108496e+01, -3.24112697e-01,
       -3.42685391e-09, -1.00682153e-04] ,     [ 5.83172089e-05, -4.55326127e-01,  6.23266717e-01,  2.44338240e-07,
        1.54376386e-06,  5.52198985e-02,  1.10390638e-05, -2.87775081e-02,
        8.26667144e-06,  1.81346592e-11, -1.94262581e-12,  6.16675637e+00,
        8.71242076e-04,  4.98518988e-05] ,     [-2.74404739e-08, -3.92617352e-04,  2.62961419e-04, -2.56848306e-05,
       -7.74788419e-03,  4.86325145e-05,  1.55214235e+01,  1.56016637e-06,
       -7.38189360e-07,  6.63204494e-04,  2.28931838e-06,  7.83197718e-05,
       -3.19170183e-03, -4.88279356e-09]

weightsHO = [ 2.18157699e-03,  2.20704671e-02, -5.15503479e+02, -2.56293638e-07,
       -3.93434515e-07,  3.49914864e-04, -5.62198579e-06, -1.78768056e-06] ,    [ 3.64770411e-03,  4.06145910e-05,  1.61225438e-03, -5.43916565e+00,
        1.86386779e+01,  4.19703197e-03,  6.11372645e-05, -4.60925730e-06] ,    [ 1.26019948e-09,  3.64573687e-02,  1.78865863e+00, -3.11111770e-06,
       -3.12013055e+00, -4.40242365e-05,  8.63477150e-08,  5.47948117e-07] ,    [-2.25018361e-14, -1.61527358e-06, -4.06003154e-07,  3.66553799e-04,
       -2.66701825e-07,  2.37447588e-06, -6.90421089e-07, -1.12249685e-05] ,    [ 6.04520903e-04, -4.66484479e-07,  7.99825052e-05,  2.74860249e-01,
       -4.08292120e-07, -1.24182786e-02,  2.38585339e-05, -9.59752063e-04] ,    [-2.11254881e-03,  1.65711623e-05, -2.78571553e-06, -1.46161570e-07,
       -5.68836189e-06,  4.55677267e-05, -1.19857678e+04, -4.57356886e-04] ,    [ 2.82718026e-04,  2.61521554e-03,  5.66664896e-05,  6.34564143e-02,
        4.12274957e-10, -2.02608460e-03, -8.29713678e-03, -1.97069805e-05] ,    [-9.31235301e-01,  7.23732893e-11,  2.04997267e-01,  3.37777550e-02,
        2.59918146e+01,  3.91718610e-04,  1.03362525e-05, -7.59461661e-01] ,    [ 5.34456808e-05, -3.76016107e-05,  8.09776567e-10, -1.29298904e-07,
        2.44923800e-02,  3.04879529e-01, -1.79141291e-05, -4.02600314e+01] ,    [-4.97175879e-02,  1.15756116e-05,  2.54931780e-03, -1.23184553e+01,
       -3.49043582e-05, -3.18693041e-09,  1.12979068e-04,  6.27640015e-02] ,    [ 4.66358833e-04,  5.60094882e-05, -1.20555294e+01, -1.57138499e-07,
       -5.48697364e-05,  3.38098611e-03,  1.42172303e-02, -2.32409654e-04] ,    [-9.40438898e-08,  4.26353789e-12,  7.56682661e-04,  7.90795191e-04,
       -3.98071144e-03,  3.99729320e+02, -1.51596344e-02,  1.56108164e-04] ,    [ 6.51507572e-07, -2.40627720e-03,  5.85754294e-03, -2.78549265e-07,
       -7.52345171e+00,  1.66644737e-05,  4.53473456e-02, -3.52018305e-05] ,    [-1.96342618e+02,  2.56148445e+02, -3.06437327e-08, -6.61693319e-03,
       -1.17661705e-06, -5.77805642e-01,  4.53006355e-04,  4.87888249e-07]


neuronH = [0 for c in range(14)]

neuronO = [0 for c in range(8)]

motor = [0 for c in range(8)]

ultsensor = [0 for c in range(6)]


COUNT = 0


# normalizaci√≥n de los motores
def motorNorm(motorArray):

        # print(motorArray)
        for i in range(0, len(motorArray)):

            if abs(motorArray[i] * 180) == 0:

                motor[i] = 90
            else:
                motor[i] = abs(motorArray[i] * 180)
        print(motor)
                
        # implementar mandar motor a los motores reales


# normalizacion de los sensotres ultrasonicos
def usNorm(usArray):
        for i in range(0, len(usArray)):

            ultsensor[i] = abs(usArray[i] * 20)


# entradas de los sensores 
def input():
    print('new inputs')

    sensorInput = np.random.random((3)) * 2 - 1


def network():

    sensorInput = np.random.random((14)) * 2 - 1

    print(COUNT)
    if COUNT == 0:
        sensorInput = np.random.random((14)) * 2 - 1
    else:
        for i in range(6, 14):
            sensorInput[i] = neuronO[i - 6]
        # print(sensorInput)
        
    # print(motor)

    # print(sensorInput)

    # print(weightsIH)

    for j in range(0, 14):
        for i in range(0, 14):

            anh = []

            anh.append(sensorInput[j] * weightsIH[j][i])

        # print(sum(anh))

        # print(anh)


        neuronH[j] = np.tanh(sum(anh))

        # dotN = np.dot(sensorInput, weightsIH[i])
        # neuronH[i] = np.tanh(dotN)

    # print(neuronH)

    for j in range(0, 8):
        for i in range(0, 14):

            anOP = []

            anOP.append(neuronH[j] * weightsIH[j][i])

        neuronO[j] = np.tanh(sum(anOP))
 
    # print(neuronO)

    # print(neuronO)

    motorNorm(neuronO)
    input()
    # sensorInput = np.random.random((14)) * 2 - 1

    # print(neuronH)
    # print(neuronO)

try:

    while True:
        network()
        COUNT = COUNT + 1
        print(COUNT)
        # intentar no utilizar sleep y que sean intervalos iguales a los del simulador 
        time.sleep(2)

except KeyboardInterrupt:

    print("Press Ctrl-C to terminate while statement")

    pass
